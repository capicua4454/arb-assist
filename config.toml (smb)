rpc_url = "https://api.mainnet-beta.solana.com"                   # RPC endpoint for retrieving data
grpc_url = ""          # GRPC endpoint for streaming transactions
grpc_token = ""                                     # GRPC or ThorStreamer X-Token
grpc_engine = "yellowstone"                         # GRPC engine: "yellowstone" or "thor"
# "smb" to generate *.toml file for SolanaMevBot smb-onchain or "na" to generate *.json file for NotArb onchain-bot or "both"
mode = "smb"
helius_key = ""                                     # Helius API key for dynamic priority fee estimation
# Include or exclude dexes you want to use
dexes = [
  "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8",   # raydium amm v4
  "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C",   # raydium cpmm
  "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA",    # pumpfun amm
  "LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo",    # meteora dlmm
  "whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc",    # orca whirlpools
  "CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK",   # raydium clmm
  "Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB",   # meteora dynamic
  "SoLFiHG9TfgtdUXUjWAxi3LtvYuFyDLVhBWxdMZxyCe",    # solfi
  "cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG",    # meteora damm v2
]
filter_programs = true                             # If true, only include transactions from arb_programs
arb_programs = [
  "MEViEnscUm6tsQRoGd9h6nLQaQspKj7DB2M5FwM3Xvz",    # Solana MEV Bot (on-chain)
#  "MEVbwoHUDJNcxZHFFg4XsyuQmBUeXEHFLNqXH635Sgi",    # Solana MEV Bot (Jupiter)
#  "FAMBuBHJ1U8DUeY3HNGuW9XsCM4bPZKYk9NXSyR2W2zd",   # NotArb
#  "NA365bsPdvZ8sP58qJ5QFg7eXygCe8aPRRxR9oeMbR5",    # NotArb
#  "3HXfeBuc1aPwAvBsdReNXKa7j1jSP3khbHbWCVkU8hUu",   # RM4 (Example)
#  "King7ki4SKMBPb3iupnQwTyjsq294jaXsgLmJo8cb7T",    # 7dGr (Example)
#  "A6PDFLzh3VbkFn6aJmHe2LSd5kaYe8bmsQc6yPjinpC2",   # CKWX (Example)
#  "E6kDzoUtNHuk7kyNzK9XUzqi5H3NfvhcXhKv4ToDDW1L",   # CG8n (Example)
#  "6MWVTis8rmmk6Vt9zmAJJbmb3VuLpzoQ1aHH4N6wQEGh",   # CzYQ (Example)
#  "MEDALksSEYQQUBsyjSjmhE1ib6Cn7bRV48MYGQ5oQGY",    # E8bT (Example)
#  "Crf6uiMVHpuqkQzE2FkWWces3xiYaTbTsFYPDSeNWksM",   # EVyb (Example)
#  "9XFCiGhW1Pkx7rGgNcMH3S9bqDjKwgjqqM2cb2YdzpJ3",   # HxkT (Example)
#  "Dd5uZwHr4bZYnkSzHwRaaq5BEvS5NHsJZErKJu7YSjhg",   # 3pjW (Example)
]
exclude_mints = [                                 # Intermedium mints to exclude
  "So11111111111111111111111111111111111111112",
  "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
]
output = "smb-config"                             # Output config filename. Will automatically append ".toml" to file name

update_interval = 10000                           # Interval in milliseconds to update the data
run_interval = 60000                              # Interval in milliseconds you want to run bot after mint meets filter threshold
halflife = 120000                                 # Interval to decay accumulated statistics by half
# If you use Jito with no_failure_mode = false, you can set ignore_filters = true to use any mints found even if they don't pass your filters
# This will keep your bot running even as long as there are arbable mints with at least 2 pools, even if they dont pass filters
ignore_filters = false
include_token2022 = false                           # Include Token2022

# Number of mints from rank list to choose for arb for each bundle group
mints_to_arb = [2, 0, 0, 0, 0]
mints_to_rank = 10                                # Number of mints to include in the rank list (cannot be less than mints_to_arb)

# Set different filter thresholds. There is no limit but you have to set at least 1. Must be in order from lowest to highest
# min_profit is the minimum arbitrage profit on the mint in lamports (u64)
# min_roi is the minimum ROI (ratio of arbitrage profit/gas fees) (f64)
# min_txns is the minimum successful arbitrage transactions detected on a mint (u64)
# min_net_volume is the minimum difference between buy and sell volume in lamports *Net volume = abs(buy_volume - sell_volume) (u64)
# min_total_volume is the minimum total trade volume *Total volume = buy_volume + sell_volume (u64)
# min_imbalance_ratio is the minimum ratio of net_volume/total_volume. Range from 0.0 to 1.0 ONLY (f64)
filter_thresholds = [
  {min_profit = 100_000_000, min_roi = 1, min_txns = 1, min_fails = 0, min_net_volume = 1_000_000_000, min_total_volume = 1_000_000_000, min_imbalance_ratio = 0.0, max_imbalance_ratio = 1.0},
]

# Set different process delay to use for each filter threshold. The number of process delay levels must be the same as filter thresholds (u64)
# Maximum compute unit limit (u64)
# Number of top pools to include *Must be 2 or more (u64)
strategy_levels = [
  {process_delay = 100, max_cu_limit = 600_000, top_pool_num = 3, memo = "arb-assist-lvl0"},
]

# Set different spam settings to use for each filter threshold. The number of spam settings must be the same as filter thresholds (u64)
# Enable spam behavior
# Define which bundle groups you want to enable spam on
# CU price strategy: Random / Linear / Exponential
spam_levels = [
  {spam = true, spam_bundle_groups = [1],min_cu_percentile = 25, max_cu_percentile = 50, min_cu_price = 10_000, max_cu_price = 50_000, tx_count = 1, cu_strategy = "Random"},
]


config_rpc_url = "https://api.mainnet-beta.solana.com"        # RPC for smb-onchain to use with generated config
sending_rpc_urls = [
  "https://api.mainnet-beta.solana.com",                      # RPCs used for sending transactions
]

cetiloan = true                                   # Enable flashloan
merge_mints = true                                # Enable merged mint spam              

# WSOl: So11111111111111111111111111111111111111112 or USDC: EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
base_mint = "So11111111111111111111111111111111111111112"

# ALUTs Configuration
aluts_per_mint = 20
aluts = [
#  "4sKLJ1Qoudh8PJyqBeuKocYdsZvxTcRShUt9aKqwhgvC"  # If you create your own ALUTs, you can add them here
]

# Jito Configuration
# Enable Jito strategy support
# Define which bundle groups you want to enable jito on
# Jito strategy: Random / Linear / Exponential
# Set different jito settings to use for each filter threshold. The number of jito settings must be the same as filter thresholds (u64)
jito_levels = [
  {jito = true, jito_bundle_groups = [1], jito_min_tip = 1_000, jito_max_tip = 50_000, jito_min_tip_percentile = 25, jito_max_tip_percentile = 75, jito_count = 1, jito_strategy = "Random"},
]

use_dynamic_jito_tip = true                       # Set to true if you want to use dynamic jito tips
jito_uuid = ""                                    # UUID for Jito instance identification
jito_ips = [
#  "192.168.1.0/24"                                # IP ranges for Jito nodes
]
jito_min_profit = 10000                           # Minimum profit threshold for Jito transactions
jito_use_min_profit = false                        # Use minimum profit check for Jito
jito_use_separate_tip_account = false              # Use a separate tip account for Jito transactions
block_engine_strategy = "OneByOne"                # "OneByOne" or "AllAtOnce"

# Enable no_failure_mode (SMB) or prefer_success (NotArb) for Jito. This will cause all your Jito txs to succeed and consume your Jito tip.
no_failure_mode = true

jito_urls = [                                     # URLs for Jito Block Engines to use
  "https://ny.mainnet.block-engine.jito.wtf/api/v1",
  "https://tokyo.mainnet.block-engine.jito.wtf/api/v1",
  "https://slc.mainnet.block-engine.jito.wtf/api/v1",
  "https://amsterdam.mainnet.block-engine.jito.wtf/api/v1",
  "https://frankfurt.mainnet.block-engine.jito.wtf/api/v1",
  "https://london.mainnet.block-engine.jito.wtf/api/v1",
  "https://singapore.mainnet.block-engine.jito.wtf/api/v1",
]

[notarb]                                            # If you use NotArb onchain then define NotArb-specific settings here
output = "notarb-config"                            # The name of the config file for NotArb
jvm_args=["-server", "-Xmx8192m"]                   # JVM arguments for optimization
keypair_path="${DEFAULT_KEYPAIR_PATH}"              # Path to wallet keypair
protect_keypair=true                                # Extra security for keypair
threads=0                                           # 0 will use a dynamic cached thread pool, -1 will use a thread per task, anything > 0 will use a fixed thread pool
meteora_bin_limit=20                                # Max number of bins for Meteora swaps (recommendation: 20)
ips_file_path=""                                    # required for proxy senders (.txt file with 1 ip/proxy per line)
prefunded_keypairs_path=""                          # optional - only for proxy senders (.txt file with 1 keypair per line)
jito_regions = ["ny", "slc", "london", "frankfurt", "amsterdam", "tokyo", "singapore"]
mints_to_arb = 2                                    # Number of mints to use for NotArb
max_bundle_transactions = 5                         # Max transactions to bundle together per Jito sender.
borrow_amount = 500_000_000                         # Amount of SOL lamports to borrow with flashloan
invalid_account_size=100                            # the default size to use for invalid accounts (accounts with no data, which can sometimes happen when accounts that don't exist yet)
buffer_size=1000                                    # how many extra bytes would you like to append to the total size (just a fail-safe type value, can be 0)